/* 
 * Vericred API
 *
 * Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,staes.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
<cost-share>     ::= <tier> <opt-num-prefix> <value> <opt-per-unit> <deductible> <tier-limit> "/" <tier> <opt-num-prefix> <value> <opt-per-unit> <deductible> "|" <benefit-limit>
<tier>           ::= "In-Network:" | "In-Network-Tier-2:" | "Out-of-Network:"
<opt-num-prefix> ::= "first" <num> <unit> | ""
<unit>           ::= "day(s)" | "visit(s)" | "exam(s)" | "item(s)"
<value>          ::= <ddct_moop> | <copay> | <coinsurance> | <compound> | "unknown" | "Not Applicable"
<compound>       ::= <copay> <deductible> "then" <coinsurance> <deductible> | <copay> <deductible> "then" <copay> <deductible> | <coinsurance> <deductible> "then" <coinsurance> <deductible>
<copay>          ::= "$" <num>
<coinsurace>     ::= <num> "%"
<ddct_moop>      ::= <copay> | "Included in Medical" | "Unlimited"
<opt-per-unit>   ::= "per day" | "per visit" | "per stay" | ""
<deductible>     ::= "before deductible" | "after deductible" | ""
<tier-limit>     ::= ", " <limit> | ""
<benefit-limit>  ::= <limit> | ""
```


 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Vericred.Client;
using IO.Vericred.Model;

namespace IO.Vericred.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvidersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find a Provider
        /// </summary>
        /// <remarks>
        /// To retrieve a specific provider, just perform a GET using his NPI number
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>ProviderShowResponse</returns>
        ProviderShowResponse GetProvider (string npi, string year = null, string state = null);

        /// <summary>
        /// Find a Provider
        /// </summary>
        /// <remarks>
        /// To retrieve a specific provider, just perform a GET using his NPI number
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>ApiResponse of ProviderShowResponse</returns>
        ApiResponse<ProviderShowResponse> GetProviderWithHttpInfo (string npi, string year = null, string state = null);
        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProvidersSearchResponse</returns>
        ProvidersSearchResponse GetProviders (RequestProvidersSearch body);

        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProvidersSearchResponse</returns>
        ApiResponse<ProvidersSearchResponse> GetProvidersWithHttpInfo (RequestProvidersSearch body);
        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProvidersGeocodeResponse</returns>
        ProvidersGeocodeResponse GetProviders_0 (RequestProvidersSearch body);

        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProvidersGeocodeResponse</returns>
        ApiResponse<ProvidersGeocodeResponse> GetProviders_0WithHttpInfo (RequestProvidersSearch body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find a Provider
        /// </summary>
        /// <remarks>
        /// To retrieve a specific provider, just perform a GET using his NPI number
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>Task of ProviderShowResponse</returns>
        System.Threading.Tasks.Task<ProviderShowResponse> GetProviderAsync (string npi, string year = null, string state = null);

        /// <summary>
        /// Find a Provider
        /// </summary>
        /// <remarks>
        /// To retrieve a specific provider, just perform a GET using his NPI number
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>Task of ApiResponse (ProviderShowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderShowResponse>> GetProviderAsyncWithHttpInfo (string npi, string year = null, string state = null);
        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProvidersSearchResponse</returns>
        System.Threading.Tasks.Task<ProvidersSearchResponse> GetProvidersAsync (RequestProvidersSearch body);

        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProvidersSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvidersSearchResponse>> GetProvidersAsyncWithHttpInfo (RequestProvidersSearch body);
        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProvidersGeocodeResponse</returns>
        System.Threading.Tasks.Task<ProvidersGeocodeResponse> GetProviders_0Async (RequestProvidersSearch body);

        /// <summary>
        /// Find Providers
        /// </summary>
        /// <remarks>
        /// ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProvidersGeocodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvidersGeocodeResponse>> GetProviders_0AsyncWithHttpInfo (RequestProvidersSearch body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProvidersApi : IProvidersApi
    {
        private IO.Vericred.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProvidersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Vericred.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvidersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProvidersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Vericred.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Vericred.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find a Provider To retrieve a specific provider, just perform a GET using his NPI number
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>ProviderShowResponse</returns>
        public ProviderShowResponse GetProvider (string npi, string year = null, string state = null)
        {
             ApiResponse<ProviderShowResponse> localVarResponse = GetProviderWithHttpInfo(npi, year, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a Provider To retrieve a specific provider, just perform a GET using his NPI number
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>ApiResponse of ProviderShowResponse</returns>
        public ApiResponse< ProviderShowResponse > GetProviderWithHttpInfo (string npi, string year = null, string state = null)
        {
            // verify the required parameter 'npi' is set
            if (npi == null)
                throw new ApiException(400, "Missing required parameter 'npi' when calling ProvidersApi->GetProvider");

            var localVarPath = "/providers/{npi}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (npi != null) localVarPathParams.Add("npi", Configuration.ApiClient.ParameterToString(npi)); // path parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter

            // authentication (Vericred-Api-Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Vericred-Api-Key")))
            {
                localVarHeaderParams["Vericred-Api-Key"] = Configuration.GetApiKeyWithPrefix("Vericred-Api-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderShowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProviderShowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderShowResponse)));
            
        }

        /// <summary>
        /// Find a Provider To retrieve a specific provider, just perform a GET using his NPI number
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>Task of ProviderShowResponse</returns>
        public async System.Threading.Tasks.Task<ProviderShowResponse> GetProviderAsync (string npi, string year = null, string state = null)
        {
             ApiResponse<ProviderShowResponse> localVarResponse = await GetProviderAsyncWithHttpInfo(npi, year, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a Provider To retrieve a specific provider, just perform a GET using his NPI number
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npi">NPI number</param>
        /// <param name="year">Only show plan ids for the given year (optional)</param>
        /// <param name="state">Only show plan ids for the given state (optional)</param>
        /// <returns>Task of ApiResponse (ProviderShowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderShowResponse>> GetProviderAsyncWithHttpInfo (string npi, string year = null, string state = null)
        {
            // verify the required parameter 'npi' is set
            if (npi == null)
                throw new ApiException(400, "Missing required parameter 'npi' when calling ProvidersApi->GetProvider");

            var localVarPath = "/providers/{npi}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (npi != null) localVarPathParams.Add("npi", Configuration.ApiClient.ParameterToString(npi)); // path parameter
            if (year != null) localVarQueryParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter

            // authentication (Vericred-Api-Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Vericred-Api-Key")))
            {
                localVarHeaderParams["Vericred-Api-Key"] = Configuration.GetApiKeyWithPrefix("Vericred-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderShowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProviderShowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderShowResponse)));
            
        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProvidersSearchResponse</returns>
        public ProvidersSearchResponse GetProviders (RequestProvidersSearch body)
        {
             ApiResponse<ProvidersSearchResponse> localVarResponse = GetProvidersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProvidersSearchResponse</returns>
        public ApiResponse< ProvidersSearchResponse > GetProvidersWithHttpInfo (RequestProvidersSearch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvidersApi->GetProviders");

            var localVarPath = "/providers/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Vericred-Api-Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Vericred-Api-Key")))
            {
                localVarHeaderParams["Vericred-Api-Key"] = Configuration.GetApiKeyWithPrefix("Vericred-Api-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvidersSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvidersSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvidersSearchResponse)));
            
        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProvidersSearchResponse</returns>
        public async System.Threading.Tasks.Task<ProvidersSearchResponse> GetProvidersAsync (RequestProvidersSearch body)
        {
             ApiResponse<ProvidersSearchResponse> localVarResponse = await GetProvidersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProvidersSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvidersSearchResponse>> GetProvidersAsyncWithHttpInfo (RequestProvidersSearch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvidersApi->GetProviders");

            var localVarPath = "/providers/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Vericred-Api-Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Vericred-Api-Key")))
            {
                localVarHeaderParams["Vericred-Api-Key"] = Configuration.GetApiKeyWithPrefix("Vericred-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvidersSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvidersSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvidersSearchResponse)));
            
        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ProvidersGeocodeResponse</returns>
        public ProvidersGeocodeResponse GetProviders_0 (RequestProvidersSearch body)
        {
             ApiResponse<ProvidersGeocodeResponse> localVarResponse = GetProviders_0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProvidersGeocodeResponse</returns>
        public ApiResponse< ProvidersGeocodeResponse > GetProviders_0WithHttpInfo (RequestProvidersSearch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvidersApi->GetProviders_0");

            var localVarPath = "/providers/search/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Vericred-Api-Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Vericred-Api-Key")))
            {
                localVarHeaderParams["Vericred-Api-Key"] = Configuration.GetApiKeyWithPrefix("Vericred-Api-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvidersGeocodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvidersGeocodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvidersGeocodeResponse)));
            
        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ProvidersGeocodeResponse</returns>
        public async System.Threading.Tasks.Task<ProvidersGeocodeResponse> GetProviders_0Async (RequestProvidersSearch body)
        {
             ApiResponse<ProvidersGeocodeResponse> localVarResponse = await GetProviders_0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Providers ### Provider Details All searches can take a &#x60;search_term&#x60;, which is used as a component in the score (and thus the ranking/order) of the results.  This is combined with the proximity to the location in ranking results. For example, we would want \&quot;Dr. John Smith\&quot; who is 5 miles away from a given Zip Code to appear before \&quot;Dr. John Smith\&quot; who is 100 miles away.  The weighting also allows for non-exact matches.  In our prior example, we would want \&quot;Dr. Jon Smith\&quot; who is 2 miles away to appear before the exact match \&quot;Dr. John Smith\&quot; who is 100 miles away because it is more likely that the user just entered an incorrect name.  The free text search also supports Specialty name search and \&quot;body part\&quot; Specialty name search.  So, searching \&quot;John Smith nose\&quot; would return \&quot;Dr. John Smith\&quot;, the ENT Specialist before \&quot;Dr. John Smith\&quot; the Internist.  In addition, we can filter &#x60;Providers&#x60; by whether or not they accept *any* insurance.  Our data set includes over 4 million &#x60;Providers&#x60;, some of whom do not accept any insurance at all.  This filter makes it more likely that the user will find his or her practitioner in some cases.  We can also use &#x60;min_score&#x60; to omit less relevant results.  This makes sense in the case where your application wants to display *all* of the results returned regardless of how many there are.  Otherwise, using our default &#x60;min_score&#x60; and pagination should be sufficient.  ### Location Information  All &#x60;Provider&#x60; searches that do *not* specify &#x60;plan_ids&#x60; or &#x60;network_ids&#x60;require some type of location information. We use this information either to weight results or to filter results, depending on the type.  #### Zip Code When providing the &#x60;zip_code&#x60; parameter, we order the &#x60;Providers&#x60; returned based on their score, which incorporates their proximity to the given Zip Code and the closeness of match to the search text.  If a &#x60;radius&#x60; is also provided, we filter out &#x60;Providers&#x60; who are outside of that radius from the center of the Zip Code provided  #### Polygon When providing the &#x60;polygon&#x60; parameter, we filter providers who are outside the bounds of the shape provided.  This is mutually exclusive with &#x60;zip_code&#x60; and &#x60;radius&#x60;.  ### Plan/Network Information We can also filter based on &#x60;Plan&#x60; and &#x60;Network&#x60; participation.  These filters are mutually exclusive and return the union of the resulting sets for each &#x60;Plan&#x60; or &#x60;Network&#x60;.  I.e. if you provider Plan A and Plan B, you will receive &#x60;Providers&#x60; who accept *either* &#x60;Plan&#x60;.  The same is true for &#x60;Networks&#x60;.  ### Examples  *Find Dr. Foo near Brooklyn*  &#x60;{ \&quot;search_term\&quot;: \&quot;Foo\&quot;, \&quot;zip_code\&quot;: \&quot;11215\&quot; }&#x60;  *Find all Providers within 5 miles of Brooklyn who accept a Plan*  &#x60;{ \&quot;zip_code\&quot;: \&quot;11215\&quot;, \&quot;radius\&quot;: 5, \&quot;hios_ids\&quot;: [\&quot;88582NY0230001\&quot;] }&#x60;  *Find all providers on a map of Brooklyn ordered by a combination of proximity to the center point of the map and relevance to the search term \&quot;ENT\&quot;*  &#x60;&#x60;&#x60; {   \&quot;polygon\&quot;: [       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.6275684851 },       {\&quot;lon\&quot;:-74.0126609802,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.7097269508 },       {\&quot;lon\&quot;:-73.9367866516,\&quot;lat\&quot;:40.6275684851 }   ],   \&quot;search_term\&quot; : \&quot;ENT\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="IO.Vericred.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProvidersGeocodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvidersGeocodeResponse>> GetProviders_0AsyncWithHttpInfo (RequestProvidersSearch body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvidersApi->GetProviders_0");

            var localVarPath = "/providers/search/geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Vericred-Api-Key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Vericred-Api-Key")))
            {
                localVarHeaderParams["Vericred-Api-Key"] = Configuration.GetApiKeyWithPrefix("Vericred-Api-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvidersGeocodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvidersGeocodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvidersGeocodeResponse)));
            
        }

    }
}
